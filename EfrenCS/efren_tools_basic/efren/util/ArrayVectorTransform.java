package efren.util;

import java.util.*;
/**
 * This class was generated by a SmartGuide.
 * 
 */
public class ArrayVectorTransform {

/**
 * Answer an object array from the elements of 
 * the vector.
 */
public Vector arrayToVector(Object[] anArray) 
{
	int max = anArray.length;
	Vector aVector = new Vector(max);
	int i;
	
	for (i = 0; i < max; ++i)
		aVector.addElement(anArray[i]);
	return aVector;
}
/**
 * Answer a vector from the elements of 
 * the input array.
 */
public static Object[] toArray(Vector aVector) 
{
	return (new ArrayVectorTransform()).vectorToArray(aVector);
}
/**
 * Answer a vector from the elements of 
 * the input array.
 */
public static int[] toIntegerArray(Vector aVector) 
{
	return (new ArrayVectorTransform()).vectorToIntegerArray(aVector);
}
/**
 * Answer an object array from the elements of 
 * the vector.
 */
public static Vector toVector(Object[][] anArray) 
{
	
	return (new ArrayVectorTransform()).twoDimArrayToVector(anArray);
}
/**
 * Answer an object array from the elements of 
 * the vector.
 */
public static Vector toVector(Object[] anArray) 
{
	
	return (new ArrayVectorTransform()).arrayToVector(anArray);
}
/**
 * Answer an object array from the elements of 
 * the vector.
 */
public Vector twoDimArrayToVector(Object[][] anArray) 
{
	int max = anArray.length;
	Vector aVector = new Vector(max);
	int i;
	
	for (i = 0; i < max; ++i)
		aVector.addElement(arrayToVector(anArray[i]));
	return aVector;
}
/**
 * Answer an object array from the elements of 
 * the vector.
 */
public Object[] vectorToArray(Vector aVector) 
{
	Enumeration e = aVector.elements();
	Object[] anArray = new Object[aVector.size()];
	int i = -1;
	
	while(e.hasMoreElements())
		anArray[++i] = e.nextElement();
	return anArray;
}
/**
 * Answer an object array from the elements of 
 * the vector.
 */
public int[] vectorToIntegerArray(Vector aVector) 
{
	Enumeration e = aVector.elements();
	int[] anArray = new int[aVector.size()];
	int i = -1;
	
	while(e.hasMoreElements())
		anArray[++i] = ((Integer) e.nextElement()).intValue();
	return anArray;
}
}
